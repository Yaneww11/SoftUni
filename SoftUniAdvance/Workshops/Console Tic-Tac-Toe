SIZE = 3


class NotFreePlace(Exception):
    pass


def is_valid_sign(sign):
    if sign in ['X', '0']:
        return True
    return False


def is_valid_position(num):
    if 0 < num <= 9:
        return True
    return False


def is_valid_cordinate(row, col):
    if 0 <= col < SIZE and 0 <= row < SIZE:
        return True
    return False


def print_board(matrix):
    [print(f"| {' | '.join(row)} |") for row in matrix]


def place_symbol(row, col, player_symbol, matrix):
    if matrix[row][col] == " ":
        matrix[row][col] = player_symbol
    else:
        raise NotFreePlace


directio_mapper = [
    (-1, 0),  # Up
    (1, 0),  # Down
    (0, -1),  # Left
    (0, 1),  # Right
    (-1, 1),  # Up right
    (1, -1),  # Down left
    (-1, -1),  # Up left
    (1, 1)  # Down right
]


def direction_count(el_row, el_col, row_movement, col_movement, sign, matrix):
    count_direction = 1
    for i in range(1, 4):
        row_index_to_check = el_row + row_movement * i
        colum_index_to_check = el_col + col_movement * i

        if not is_valid_cordinate(row_index_to_check, colum_index_to_check):
            break

        if matrix[row_index_to_check][colum_index_to_check] != sign:
            break

        count_direction += 1

    return count_direction


def opposite_direction_count(el_row, el_col, row_movement, col_movement, sign, matrix):
    count_direction = 0
    for i in range(1, 4):
        row_index_to_check = el_row - row_movement * i
        colum_index_to_check = el_col - col_movement * i

        if not is_valid_cordinate(row_index_to_check, colum_index_to_check):
            break

        if matrix[row_index_to_check][colum_index_to_check] != sign:
            break

        count_direction += 1

    return count_direction


def is_winner(el_row, el_colum, sign, matrix):
    count = 0
    for row_movement, col_movement in directio_mapper:
        count = direction_count(el_row, el_colum, row_movement, col_movement, sign, matrix)
        count += opposite_direction_count(el_row, el_colum, row_movement, col_movement, sign, matrix)
        if count == 3:
            return True
    return False


board = [[" " for _ in range(SIZE)] for row in range(SIZE)]
board_mapper = {i + 1: (i // SIZE, i % SIZE) for i in range(SIZE ** 2)}
'''{
1: (0, 0), 2: (0, 1), 3: (0, 2),
4: (1, 0), 5: (1, 1), 6: (1, 2),
7: (2, 0), 8: (2, 1), 9: (2, 2) 
}'''

player_one = input("Player one name: ").strip()
player_two = input("Player two name: ").strip()

while True:
    player_one_sign = input(f"{player_one}, would you like to play with 'X' or '0'").upper()
    if is_valid_sign(player_one_sign):
        break
    print("Wrong input! Enter 'X' or '0': ")
player_two_sign = '0' if player_one_sign == 'X' else 'X'

[print(f"| {' | '.join([str(i + 1 + row * SIZE) for i in range(SIZE)])} |") for row in range(SIZE)]
print(f"{player_one} starts first")

turn = 1

while turn < 10:
    current_player = player_one if turn % 2 else player_two  # turn % 2 == turn % 2 != 0
    current_sign = player_one_sign if turn % 2 else player_two_sign
    try:
        selected_position = int(input(f"{current_player} choose a free position [1-9]: ").strip())
        if not is_valid_position(selected_position):
            raise ValueError
        row, colum = board_mapper[selected_position]
        place_symbol(row, colum, current_sign, board)
        print_board(board)

    except ValueError:
        print("!! Invalid position !!")
        continue
    except NotFreePlace:
        print("!! This position is not free !!")
        continue

    if turn >= 5:
        if is_winner(row, colum, current_sign, board):
            print(f"Congratulations {current_player} is a winner")
            break
    turn += 1
print("DRAW")
