-- 01
CREATE OR REPLACE FUNCTION fn_count_employees_by_town(town_name varchar(20))
RETURNs INT AS
$$
	DECLARE
		town_count INT;
	BEGIN
		SELECT 
			COUNT(*) INTO town_count
		FROM 
			employees as e
		JOIN 
			addresses as a
		USING(address_id)
		JOIN 
			towns as t
		USING(town_id)
		WHERE t.name = town_name;
		RETURN town_count;
	END;
$$
LANGUAGE plpgsql;

-- 02
CREATE OR REPLACE PROCEDURE sp_increase_salaries(department_name VARCHAR)
AS $$
	BEGIN
		UPDATE employees
		SET salary = salary + salary * 0.05
		WHERE department_id = (
			SELECT 
				department_id 
			FROM 
				departments 
			WHERE 
				name = 'Finance'
		);
	END;
$$
LANGUAGE plpgsql;

-- 03
CREATE OR REPLACE PROCEDURE sp_increase_salary_by_id(id INT)
AS $$
	BEGIN
		IF (SELECT COUNT(employee_id) FROM employees) < id OR id < 0
		THEN
		ROLLBACK;
		ELSE 
			UPDATE employees 
			SET salary = salary * 1.05
			WHERE employee_id = id;
		END IF;
END;
$$
LANGUAGE plpgsql;

-- 04
CREATE TABLE deleted_employees(
	employee_id SERIAL PRIMARY KEY, 
	first_name VARCHAR(20), 
	last_name VARCHAR(20), 
	middle_name VARCHAR(20), 
	job_title VARCHAR(50), 
	department_id INT, 
	salary NUMERIC(19,4)
);

CREATE OR REPLACE FUNCTION deleted_employees_triger()
RETURNS TRIGGER 
AS $$
BEGIN
	INSERT INTO deleted_employees (first_name,last_name,
		middle_name,job_title,department_id,salary)
	VALUES (
		old.first_name, 
		old.last_name, 
		old.middle_name, 
		old.job_title,
		old.department_id,
		old.salary
	);
	RETURN OLD;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER tr_deleted_employees
AFTER DELETE ON employees
FOR EACH ROW
EXECUTE PROCEDURE deleted_employees_triger();
