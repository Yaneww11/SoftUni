-- 13
SELECT 
	count(CASE department_id WHEN 1 THEN 1 end) as "Engineering",
	count(CASE department_id WHEN 2 THEN 1 end) as "Tool Design",
	count(CASE department_id WHEN 3 THEN 1 end) as "Sales",
	count(CASE department_id WHEN 4 THEN 1 end) as "Marketing",
	count(CASE department_id WHEN 5 THEN 1 end) as "Purchasing",
	count(CASE department_id WHEN 6 THEN 1 end) as "Research and Development",
	count(CASE department_id WHEN 7 THEN 1 end) as "Production"
FROM employees
	;

-- 14 
UPDATE employees
SET salary =
	CASE
		WHEN hire_date < '2015-01-16' THEN salary + 2500
		WHEN hire_date < '2020-03-04' THEN salary + 1500
		ELSE salary
	END,
job_title = 
	CASE
		WHEN hire_date < '2015-01-16' THEN concat('Senior ', job_title)
		WHEN hire_date < '2020-03-04' THEN concat('Mid-', job_title)
		ELSE job_title
	END
RETURNING *
;

-- 15
SELECT 
	job_title,
	CASE
		WHEN AVG(salary) > 45800 THEN 'Good'
		WHEN AVG(salary) BETWEEN 27500 AND 45800 THEN 'Medium'
		ELSE 'Need Improvement'
	END AS category
FROM employees
GROUP BY job_title
ORDER BY category, job_title
;

-- 16
SELECT 
	project_name,
	CASE
		WHEN start_date IS NULL AND end_date IS NULL THEN 'Ready for development'
		WHEN start_date IS NOT NULL AND end_date IS  NULL THEN 'In Progres'
		ELSE 'Done'
	END
FROM projects
WHERE project_name LIKE '%Mountain%'
;

-- 17
SELECT
	department_id,
	count(*),
	CASE
		WHEN avg(salary) > 50000 THEN 'Above average'
		WHEN avg(salary) <= 50000 THEN 'Below average'
	END
FROM employees
GROUP BY  department_id
	HAVING avg(salary) > 30000
ORDER BY department_id
;

-- 18
CREATE VIEW view_performance_rating AS
SELECT
	first_name, 
	last_name,
	job_title,
	salary,
	department_id,
	CASE
		WHEN salary >= 25000 THEN
			CASE
				WHEN job_title LIKE 'Senior%' THEN 'High-performing Senior'
				ELSE 'High-performing Employee'
			END
		ELSE 'Average-performing'
	END as performance_rating
FROM employees;
